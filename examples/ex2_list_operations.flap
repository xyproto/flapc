// Example 2: List operations with transformations
// Demonstrates: lists, lambdas, higher-order functions, parallel processing

// Create a list of numbers
numbers := [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]

// Define transformation functions
double := (x) => x * 2
square := (x) => x * x
isEven := (x) => (x mod 2) == 0

printf("Original list: ")
@ n in numbers {
    printf("%v ", n)
}
printf("\n")

// Transform list elements
printf("\nDoubled: ")
@ n in numbers {
    printf("%v ", double(n))
}
printf("\n")

printf("Squared: ")
@ n in numbers {
    printf("%v ", square(n))
}
printf("\n")

printf("Even numbers: ")
@ n in numbers {
    isEven(n) {
        printf("%v ", n)
    }
}
printf("\n")

// Parallel transformation using built-in parallel map
printf("\nParallel doubled: ")
doubled := numbers |> double
@ n in doubled {
    printf("%v ", n)
}
printf("\n")
