// Test unsafe blocks with memory store operations

// Allocate some memory
buffer := alloc(64)

// Test register store using cast: [buffer] <- value
unsafe {
    rax <- buffer as pointer
    rbx <- 42
    [rax] <- rbx             // Store 42 at buffer
} {
    x0 <- buffer as pointer
    x1 <- 42
    [x0] <- x1
} {
    a0 <- buffer as pointer
    a1 <- 42
    [a0] <- a1
}

// Read back the value
result1 := unsafe {
    rax <- buffer as pointer
    rax <- [rax]
} {
    x0 <- buffer as pointer
    x0 <- [x0]
} {
    a0 <- buffer as pointer
    a0 <- [a0]
}

printf("Stored and loaded register value: %.0f\n", result1)

// Test immediate store: [buffer+8] <- 100
unsafe {
    rax <- buffer as pointer
    rax <- rax + 8
    [rax] <- 100
} {
    x0 <- buffer as pointer
    x0 <- x0 + 8
    [x0] <- 100
} {
    a0 <- buffer as pointer
    a0 <- a0 + 8
    [a0] <- 100
}

// Read back the immediate value
result2 := unsafe {
    rax <- buffer as pointer
    rax <- rax + 8
    rax <- [rax]
} {
    x0 <- buffer as pointer
    x0 <- x0 + 8
    x0 <- [x0]
} {
    a0 <- buffer as pointer
    a0 <- a0 + 8
    a0 <- [a0]
}

printf("Stored and loaded immediate value: %.0f\n", result2)

exit(0)
