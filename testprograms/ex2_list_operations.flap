// Example 2: List operations with transformations
// Demonstrates: lists, lambdas, higher-order functions, parallel processing

// TODO: The doubled output is wrong, fix

// Create a list of numbers
numbers := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

// Define transformation functions
double := x => x * 2
square := x => x * x
isEven := x => (x mod 2) == 0

printf("Original list: ")
@ n in numbers  max 100000 {
    printf("%v ", n)
}
printf("\n")

// Transform list elements
printf("\nDoubled: ")
@ n in numbers  max 100000 {
    printf("%v ", double(n))
}
printf("\n")

printf("Squared: ")
@ n in numbers  max 100000 {
    printf("%v ", square(n))
}
printf("\n")

printf("Even numbers: ")
@ n in numbers  max 100000 {
    isEven(n) {
        printf("%v ", n)
    }
}
printf("\n")

// Parallel transformation using built-in parallel map
printf("\nParallel doubled: ")
doubled := numbers | double
@ n in doubled  max 100000 {
    printf("%v ", n)
}
printf("\n")
