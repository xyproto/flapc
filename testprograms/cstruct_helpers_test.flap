// Test cstruct with helper functions for field access
// This demonstrates the recommended way to work with cstructs in Flap

cstruct Player {
    x as float64
    y as float64
    health as int32
    score as int64
}

printf("Player struct layout:\n")
printf("  Size: %.0f bytes\n", Player_SIZEOF)
printf("  x offset: %.0f\n", Player_x_OFFSET)
printf("  y offset: %.0f\n", Player_y_OFFSET)
printf("  health offset: %.0f\n", Player_health_OFFSET)
printf("  score offset: %.0f\n", Player_score_OFFSET)

// Allocate a Player struct
player_ptr := call("malloc", Player_SIZEOF as uint64)
printf("\nAllocated Player at pointer: %.0f\n", player_ptr)

// Write Player fields using helper functions
write_f64(player_ptr, Player_x_OFFSET as int32, 100.5)
write_f64(player_ptr, Player_y_OFFSET as int32, 200.75)
write_i32(player_ptr, Player_health_OFFSET as int32, 100)
write_i64(player_ptr, Player_score_OFFSET as int32, 9999)

printf("\nWrote player data:\n")
printf("  x=100.5, y=200.75, health=100, score=9999\n")

// Read Player fields back
x_val := read_f64(player_ptr, Player_x_OFFSET as int32)
y_val := read_f64(player_ptr, Player_y_OFFSET as int32)
health_val := read_i32(player_ptr, Player_health_OFFSET as int32)
score_val := read_i64(player_ptr, Player_score_OFFSET as int32)

printf("\nRead player data:\n")
printf("  x=%.2f (expected 100.50)\n", x_val)
printf("  y=%.2f (expected 200.75)\n", y_val)
printf("  health=%.0f (expected 100)\n", health_val)
printf("  score=%.0f (expected 9999)\n", score_val)

// Verify values
success := 1
x_val != 100.5 { success = 0 }
y_val != 200.75 { success = 0 }
health_val != 100 { success = 0 }
score_val != 9999 { success = 0 }

success == 1 {
    printf("\n✓ CStruct with helper functions working correctly!\n")
}
success == 0 {
    printf("\n✗ Values don't match expected\n")
}

// Free the memory
call("free", player_ptr as ptr)
printf("Memory freed\n")
