// Test atomic operations
// Demonstrates atomic_add, atomic_cas, atomic_load, and atomic_store

// Allocate a counter in memory (using malloc for simplicity)
counter_ptr := malloc(8)  // 8 bytes for int64

// Initialize counter to 0 using atomic_store
atomic_store(counter_ptr, 0)
printf("Initial value: %.0f\n", atomic_load(counter_ptr))

// Test atomic_add
old1 := atomic_add(counter_ptr, 5)
printf("atomic_add(5): old=%.0f, new=%.0f\n", old1, atomic_load(counter_ptr))

old2 := atomic_add(counter_ptr, 3)
printf("atomic_add(3): old=%.0f, new=%.0f\n", old2, atomic_load(counter_ptr))

// Test atomic_cas (compare and swap)
// Try to swap 8 with 10 (should succeed)
success1 := atomic_cas(counter_ptr, 8, 10)
printf("atomic_cas(8, 10): success=%.0f, value=%.0f\n", success1, atomic_load(counter_ptr))

// Try to swap 8 with 20 (should fail, value is now 10)
success2 := atomic_cas(counter_ptr, 8, 20)
printf("atomic_cas(8, 20): success=%.0f, value=%.0f\n", success2, atomic_load(counter_ptr))

// Try to swap 10 with 20 (should succeed)
success3 := atomic_cas(counter_ptr, 10, 20)
printf("atomic_cas(10, 20): success=%.0f, value=%.0f\n", success3, atomic_load(counter_ptr))

// Final value
printf("Final value: %.0f\n", atomic_load(counter_ptr))

// Free memory
free(counter_ptr)