// Test packed and aligned modifiers for cstruct

// Normal struct (with automatic padding)
cstruct Normal {
    a as uint8
    b as uint64
    c as uint8
}

// Packed struct (no padding between fields)
cstruct Packed packed {
    a as uint8
    b as uint64
    c as uint8
}

// Aligned struct (custom alignment)
cstruct Aligned16 aligned(16) {
    a as uint8
    b as uint64
    c as uint8
}

// Packed AND aligned (no padding, but struct aligned to 16 bytes)
cstruct PackedAligned packed aligned(16) {
    a as uint8
    b as uint64
    c as uint8
}

printf("Struct Layout Comparison:\n")
printf("=========================\n\n")

printf("Normal (default alignment):\n")
printf("  Size: %.0f bytes\n", Normal_SIZEOF)
printf("  a offset: %.0f\n", Normal_a_OFFSET)
printf("  b offset: %.0f\n", Normal_b_OFFSET)
printf("  c offset: %.0f\n", Normal_c_OFFSET)

printf("\nPacked (no padding):\n")
printf("  Size: %.0f bytes\n", Packed_SIZEOF)
printf("  a offset: %.0f\n", Packed_a_OFFSET)
printf("  b offset: %.0f\n", Packed_b_OFFSET)
printf("  c offset: %.0f\n", Packed_c_OFFSET)

printf("\nAligned(16) (natural padding + 16-byte struct alignment):\n")
printf("  Size: %.0f bytes\n", Aligned16_SIZEOF)
printf("  a offset: %.0f\n", Aligned16_a_OFFSET)
printf("  b offset: %.0f\n", Aligned16_b_OFFSET)
printf("  c offset: %.0f\n", Aligned16_c_OFFSET)

printf("\nPacked + Aligned(16) (no field padding, but 16-byte struct alignment):\n")
printf("  Size: %.0f bytes\n", PackedAligned_SIZEOF)
printf("  a offset: %.0f\n", PackedAligned_a_OFFSET)
printf("  b offset: %.0f\n", PackedAligned_b_OFFSET)
printf("  c offset: %.0f\n", PackedAligned_c_OFFSET)

printf("\nExpected results:\n")
printf("  Normal: 24 bytes (u8 + 7 pad + u64 + u8 + 7 pad)\n")
printf("  Packed: 10 bytes (u8 + u64 + u8, no padding)\n")
printf("  Aligned16: 32 bytes (naturally 24, rounded up to 16-byte boundary)\n")
printf("  PackedAligned: 16 bytes (packed to 10, rounded up to 16-byte boundary)\n")
