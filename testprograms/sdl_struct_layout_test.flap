// Test SDL3 struct layouts without actually initializing SDL

// Define SDL3 structs
cstruct SDL_FRect {
    x as float32
    y as float32
    w as float32
    h as float32
}

cstruct SDL_Rect {
    x as int32
    y as int32
    w as int32
    h as int32
}

cstruct SDL_Point {
    x as int32
    y as int32
}

cstruct SDL_FPoint {
    x as float32
    y as float32
}

// Display struct layouts
printf("SDL3 Struct Layouts:\n")
printf("===================\n\n")

printf("SDL_FRect (floating-point rectangle):\n")
printf("  Size: %.0f bytes (expected 16)\n", SDL_FRect_SIZEOF)
printf("  x offset: %.0f\n", SDL_FRect_x_OFFSET)
printf("  y offset: %.0f\n", SDL_FRect_y_OFFSET)
printf("  w offset: %.0f\n", SDL_FRect_w_OFFSET)
printf("  h offset: %.0f\n", SDL_FRect_h_OFFSET)

printf("\nSDL_Rect (integer rectangle):\n")
printf("  Size: %.0f bytes (expected 16)\n", SDL_Rect_SIZEOF)
printf("  x offset: %.0f\n", SDL_Rect_x_OFFSET)
printf("  y offset: %.0f\n", SDL_Rect_y_OFFSET)
printf("  w offset: %.0f\n", SDL_Rect_w_OFFSET)
printf("  h offset: %.0f\n", SDL_Rect_h_OFFSET)

printf("\nSDL_Point (integer point):\n")
printf("  Size: %.0f bytes (expected 8)\n", SDL_Point_SIZEOF)
printf("  x offset: %.0f\n", SDL_Point_x_OFFSET)
printf("  y offset: %.0f\n", SDL_Point_y_OFFSET)

printf("\nSDL_FPoint (floating-point point):\n")
printf("  Size: %.0f bytes (expected 8)\n", SDL_FPoint_SIZEOF)
printf("  x offset: %.0f\n", SDL_FPoint_x_OFFSET)
printf("  y offset: %.0f\n", SDL_FPoint_y_OFFSET)

// Verify all layouts
all_correct := 1

SDL_FRect_SIZEOF != 16 { all_correct = 0 }
SDL_Rect_SIZEOF != 16 { all_correct = 0 }
SDL_Point_SIZEOF != 8 { all_correct = 0 }
SDL_FPoint_SIZEOF != 8 { all_correct = 0 }

printf("\n")
all_correct == 1 {
    printf("✓ All SDL3 struct layouts are correct!\n")
}
all_correct == 0 {
    printf("✗ Some struct layouts are incorrect\n")
}
