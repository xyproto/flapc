// Test unsafe blocks with arithmetic operations

// Test addition
result1 := unsafe int64 {
    rax <- 10
    rbx <- 20
    rax <- rax + rbx
} {
    x0 <- 10
    x1 <- 20
    x0 <- x0 + x1
} {
    a0 <- 10
    a1 <- 20
    a0 <- a0 + a1
}

printf("10 + 20 = %.0f\n", result1)

// Test subtraction
result2 := unsafe int64 {
    rax <- 100
    rbx <- 42
    rax <- rax - rbx
} {
    x0 <- 100
    x1 <- 42
    x0 <- x0 - x1
} {
    a0 <- 100
    a1 <- 42
    a0 <- a0 - a1
}

printf("100 - 42 = %.0f\n", result2)

// Test bitwise AND
result3 := unsafe int64 {
    rax <- 0xFF
    rbx <- 0x0F
    rax <- rax & rbx
} {
    x0 <- 0xFF
    x1 <- 0x0F
    x0 <- x0 & x1
} {
    a0 <- 0xFF
    a1 <- 0x0F
    a0 <- a0 & a1
}

printf("0xFF & 0x0F = %.0f\n", result3)

// Test bitwise OR
result4 := unsafe int64 {
    rax <- 0xF0
    rbx <- 0x0F
    rax <- rax | rbx
} {
    x0 <- 0xF0
    x1 <- 0x0F
    x0 <- x0 | x1
} {
    a0 <- 0xF0
    a1 <- 0x0F
    a0 <- a0 | a1
}

printf("0xF0 | 0x0F = %.0f\n", result4)

// Test NOT
result5 := unsafe int64 {
    rax <- 0
    rax <- ~b rax
} {
    x0 <- 0
    x0 <- ~b x0
} {
    a0 <- 0
    a0 <- ~b a0
}

printf("~b 0 = %.0f\n", result5)
