// Classic Snake Game in Flap using SDL3
// Demonstrates C FFI, game loops, and input handling

import sdl3 as sdl

// Game constants
WINDOW_WIDTH := 800
WINDOW_HEIGHT := 600
GRID_SIZE := 20
GRID_WIDTH := WINDOW_WIDTH / GRID_SIZE
GRID_HEIGHT := WINDOW_HEIGHT / GRID_SIZE

// Colors (RGBA)
COLOR_BACKGROUND := 0x1a1a1aff
COLOR_SNAKE := 0x00ff00ff
COLOR_FOOD := 0xff0000ff
COLOR_GRID := 0x333333ff

// Direction constants
DIR_NONE := 0
DIR_UP := 1
DIR_DOWN := 2
DIR_LEFT := 3
DIR_RIGHT := 4

// Initialize SDL3
init_result := sdl.SDL_Init(sdl.SDL_INIT_VIDEO)
init_result != 0 {
    printf("SDL_Init Error: %s\n", sdl.SDL_GetError())
    exit(1)
}

// Create window
window := sdl.SDL_CreateWindow("Flap Snake Game", WINDOW_WIDTH, WINDOW_HEIGHT, 0)
window == 0 {
    printf("SDL_CreateWindow Error: %s\n", sdl.SDL_GetError())
    sdl.SDL_Quit()
    exit(1)
}

// Create renderer
renderer := sdl.SDL_CreateRenderer(window, 0)
renderer == 0 {
    printf("SDL_CreateRenderer Error: %s\n", sdl.SDL_GetError())
    sdl.SDL_DestroyWindow(window)
    sdl.SDL_Quit()
    exit(1)
}

// Game state variables
mutable snake_length := 3
mutable snake_x := [400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
             400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
             400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
             400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
             400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
             400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
             400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
             400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
             400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
             400, 400, 400, 400, 400, 400, 400, 400, 400, 400]

mutable snake_y := [300, 280, 260, 300, 300, 300, 300, 300, 300, 300,
             300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
             300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
             300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
             300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
             300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
             300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
             300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
             300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
             300, 300, 300, 300, 300, 300, 300, 300, 300, 300]

mutable direction := DIR_DOWN
mutable food_x := 200
mutable food_y := 200
mutable game_over := 0
mutable score := 0

printf("Snake Game Controls:\n")
printf("  Arrow keys to move\n")
printf("  ESC to quit\n")
printf("Starting game...\n")

// Game loop
mutable frame_count := 0
max_frames := 200

@ i in 0..<max_frames max 1000 {
    // Delay to control game speed (every 10 frames = ~150ms)
    sdl.SDL_Delay(15)
    frame_count = frame_count + 1

    // Only update game state every 10 frames - skip rendering on other frames
    (frame_count % 10) != 0 {
        @++
    }

    game_over == 0 {
        // Move snake
        new_x := snake_x[0]
        new_y := snake_y[0]

        direction == DIR_UP { new_y = new_y - GRID_SIZE }
        direction == DIR_DOWN { new_y = new_y + GRID_SIZE }
        direction == DIR_LEFT { new_x = new_x - GRID_SIZE }
        direction == DIR_RIGHT { new_x = new_x + GRID_SIZE }

        // Check wall collision
        (new_x < 0) | (new_x >= WINDOW_WIDTH) | (new_y < 0) | (new_y >= WINDOW_HEIGHT) {
            game_over = 1
            printf("Game Over! Final Score: %.0f\n", score)
        }

        game_over == 0 {
            // Move body segments (backwards from tail to head)
            seg_count := snake_length - 1
            @ j in 1..<snake_length max 100 {
                idx := seg_count - j + 1
                snake_x[idx] = snake_x[idx - 1]
                snake_y[idx] = snake_y[idx - 1]
            }

            snake_x[0] = new_x
            snake_y[0] = new_y

            // Check food collision
            (snake_x[0] == food_x) & (snake_y[0] == food_y) {
                snake_length = snake_length + 1
                score = score + 10
                printf("Score: %.0f\n", score)

                // Generate new food position (simple random using frame count)
                food_x = ((frame_count * 137) % GRID_WIDTH) * GRID_SIZE
                food_y = ((frame_count * 211) % GRID_HEIGHT) * GRID_SIZE
            }
        }
    }

    // Clear screen (dark background)
    sdl.SDL_SetRenderDrawColor(renderer, 26, 26, 26, 255)
    sdl.SDL_RenderClear(renderer)

    // Draw grid (simplified - skip for now as we need SDL_Rect support)

    // Draw food (red) - simplified without actual rendering
    // Would need SDL_FRect struct support

    // Draw snake (green) - simplified without actual rendering
    // Would need SDL_FRect struct support

    // Present the rendered frame
    sdl.SDL_RenderPresent(renderer)
}

// Cleanup
sdl.SDL_DestroyRenderer(renderer)
sdl.SDL_DestroyWindow(window)
sdl.SDL_Quit()

printf("\nGame Statistics:\n")
printf("  Final Score: %.0f\n", score)
printf("  Snake Length: %.0f\n", snake_length)
printf("\nThanks for playing Snake in Flap!\n")
